module lcd


import str

// #################### NXC Display module ####################

// Constants that are for use with the display contrast API functions. 
// #define 	lcd__contrast_default	DISPLAY_CONTRAST_DEFAULT
// #define 	lcd__contrast_max    	DISPLAY_CONTRAST_MAX    

// Constants that are for use with the display flags functions. 
// #define 	lcd__on                 DISPLAY_ON             
// #define 	lcd__refresh         	DISPLAY_REFRESH            
// #define 	lcd__popup           	DISPLAY_POPUP            
// #define 	lcd__refresh_disabled	DISPLAY_REFRESH_DISABLED            
// #define 	lcd__busy            	DISPLAY_BUSY             

// Constant offsets into the display module IOMAP structure. 
// #define 	offset_p_func                    DisplayOffsetPFunc
// #define 	offset_erase_mask                DisplayOffsetEraseMask
// #define 	offset_update_mask               DisplayOffsetUpdateMask
// #define 	offset_p_font                    DisplayOffsetPFont
// #define 	offset_p_text_lines              DisplayOffsetPTextLines
// #define 	offset_p_status_text             DisplayOffsetPStatusText
// #define 	offset_p_status_icons            DisplayOffsetPStatusIcons
// #define 	offset_p_screens                 DisplayOffsetPScreens
// #define 	offset_p_bitmaps                 DisplayOffsetPBitmaps
// #define 	offset_p_menu_text               DisplayOffsetPMenuText
// #define 	offset_p_menu_icons              DisplayOffsetPMenuIcons
// #define 	offset_p_step_icons              DisplayOffsetPStepIcons
// #define 	offset_display                   DisplayOffsetDisplay
// #define 	offset_status_icons              DisplayOffsetStatusIcons
// #define 	offset_step_icons                DisplayOffsetStepIcons
// #define 	offset_flags                     DisplayOffsetFlags
// #define 	offset_text_lines_center_flags   DisplayOffsetTextLinesCenterFlags
// #define 	offset_normal                    DisplayOffsetNormal
// #define 	offset_popup                     DisplayOffsetPopup
// #define 	offset_contrast                  DisplayOffsetContrast

// Constants that are for use with the DisplayExecuteFunction system call. 
// #define 	lcd__erase_all      		DISPLAY_ERASE_ALL            
// #define 	lcd__pixel          		DISPLAY_PIXEL            
// #define 	lcd__horizontal_line		DISPLAY_HORIZONTAL_LINE            
// #define 	lcd__vertical_line  		DISPLAY_VERTICAL_LINE            
// #define 	lcd__char           		DISPLAY_CHAR            
// #define 	lcd__erase_line     		DISPLAY_ERASE_LINE            
// #define 	lcd__fill_region    		DISPLAY_FILL_REGION            
// #define 	lcd__frame          		DISPLAY_FRAME           


// Constants that are for specifying drawing options in several display module API functions. 
// #define 	draw_opt_normal							DRAW_OPT_NORMAL                       
// #define 	draw_opt_clear_whole_screen				DRAW_OPT_CLEAR_WHOLE_SCREEN                       
// #define 	draw_opt_clear_except_status_screen		DRAW_OPT_CLEAR_EXCEPT_STATUS_SCREEN                       
// #define 	draw_opt_clear_pixels					DRAW_OPT_CLEAR_PIXELS                       
// #define 	draw_opt_clear							DRAW_OPT_CLEAR                       
// #define 	draw_opt_invert							DRAW_OPT_INVERT                       
// #define 	draw_opt_logical_copy					DRAW_OPT_LOGICAL_COPY                       
// #define 	draw_opt_logical_and					DRAW_OPT_LOGICAL_AND                       
// #define 	draw_opt_logical_or						DRAW_OPT_LOGICAL_OR                       
// #define 	draw_opt_logical_xor					DRAW_OPT_LOGICAL_XOR                       
// #define 	draw_opt_fill_shape						DRAW_OPT_FILL_SHAPE                       
// #define 	draw_opt_clear_screen_modes				DRAW_OPT_CLEAR_SCREEN_MODES                       
// #define 	draw_opt_logical_operations				DRAW_OPT_LOGICAL_OPERATIONS                       
// #define 	draw_opt_polygon_polyline				DRAW_OPT_POLYGON_POLYLINE                       
// #define 	draw_opt_clear_line						DRAW_OPT_CLEAR_LINE                       
// #define 	draw_opt_clear_eol						DRAW_OPT_CLEAR_EOL   

// Line numbers for use with DrawText system function.  
@[as_macro] pub const line8	= 0    
@[as_macro] pub const line7	= 8    
@[as_macro] pub const line6	= 16   
@[as_macro] pub const line5	= 24   
@[as_macro] pub const line4	= 32   
@[as_macro] pub const line3	= 40   
@[as_macro] pub const line2	= 48   
@[as_macro] pub const line1	= 56   

// Constants that are for use with getting/setting display data. 
@[as_macro] pub const textline_1 = 0  
@[as_macro] pub const textline_2 = 1  
@[as_macro] pub const textline_3 = 2  
@[as_macro] pub const textline_4 = 3  
@[as_macro] pub const textline_5 = 4  
@[as_macro] pub const textline_6 = 5  
@[as_macro] pub const textline_7 = 6  
@[as_macro] pub const textline_8 = 7  
@[as_macro] pub const textlines  = 8  

// Constants that are part of the NXT firmware's Display module. 
// #define 	mode_restore			SCREEN_MODE_RESTORE   
// #define 	mode_clear				SCREEN_MODE_CLEAR   
// #define 	height					DISPLAY_HEIGHT                                         
// #define 	width					DISPLAY_WIDTH                                         
// #define 	menuicons_y				DISPLAY_MENUICONS_Y                                         
// #define 	menuicons_x_offs		DISPLAY_MENUICONS_X_OFFS                                         
// #define 	menuicons_x_diff		DISPLAY_MENUICONS_X_DIFF                                         
// #define 	menuicon_left			MENUICON_LEFT                                         
// #define 	menuicon_center			MENUICON_CENTER                                         
// #define 	menuicon_right			MENUICON_RIGHT                                         
// #define 	menuicons				MENUICONS                                         
// #define 	frame_select			FRAME_SELECT                                         
// #define 	statustext				STATUSTEXT                                         
// #define 	menutext				MENUTEXT                                         
// #define 	stepline				STEPLINE                                         
// #define 	topline					TOPLINE                                         
// #define 	specials				SPECIALS                                         
// #define 	statusicon_bluetooth	STATUSICON_BLUETOOTH                                         
// #define 	statusicon_usb			STATUSICON_USB                                         
// #define 	statusicon_vm			STATUSICON_VM                                         
// #define 	statusicon_battery		STATUSICON_BATTERY                                         
// #define 	statusicons				STATUSICONS                                         
// #define 	screen_background		SCREEN_BACKGROUND                                         
// #define 	screen_large			SCREEN_LARGE                                        
// #define 	screen_small			SCREEN_SMALL                                        
// #define 	screens					SCREENS                                        
// #define 	bitmap_1				BITMAP_1                                        
// #define 	bitmap_2				BITMAP_2                                        
// #define 	bitmap_3				BITMAP_3                                        
// #define 	bitmap_4				BITMAP_4                                        
// #define 	bitmaps					BITMAPS                                        
// #define 	stepicon_1				STEPICON_1                                        
// #define 	stepicon_2				STEPICON_2                                        
// #define 	stepicon_3				STEPICON_3                                        
// #define 	stepicon_4				STEPICON_4                                        
// #define 	stepicon_5				STEPICON_5                                        
// #define 	stepicons				STEPICONS                                        

// 
@[as_macro] 
pub fn reset() {
	C.ResetScreen() 
}

@[as_macro] 
pub fn circle(x i16, y i16, radius u8) i8 {
	return C.CircleOut(x, y, radius, C.DRAW_OPT_NORMAL) 
}

@[as_macro] 
pub fn line(x1 i16, y1 i16, x2 i16, y2 i16) i8 {
	return C.LineOut(x1, y1, x2, y2, C.DRAW_OPT_NORMAL) 
}

@[as_macro] 
pub fn point(x i16, y i16) i8 {
	return C.PointOut(x, y, C.DRAW_OPT_NORMAL) 
}

@[as_macro] 
pub fn rect(x i16, y i16, width i16, height i16) i8 {
	return C.RectOut(x, y, width, height, C.DRAW_OPT_NORMAL) 
}

@[as_macro] 
pub fn text(x i16, y i16, str string) i8 {
	return C.TextOut(x, y, str, C.DRAW_OPT_NORMAL) 
}

@[as_macro] 
pub fn num(x i16, y i16, value any) i8 {
	return C.NumOut(x, y, value, C.DRAW_OPT_NORMAL) 
}

@[as_macro] 
pub fn ellipse(x i16, y i16, radius_x u8, radius_y u8) i8 {
	return C.EllipseOut(x, y, radius_x, radius_y, C.DRAW_OPT_NORMAL) 
}

@[as_macro] 
pub fn poly(points any[]) i8 {
	return C.PolyOut(points, C.DRAW_OPT_NORMAL) 
}

// @[as_macro] 
// pub fn font_text() i8 {
// 	return C.FontTextOut(C.DRAW_OPT_NORMAL) 
// }

// @[as_macro] 
// pub fn font_num() i8 {
// 	return C.FontNumOut(C.DRAW_OPT_NORMAL) 
// }

// @[as_macro] 
// pub fn graphic() i8 {
// 	return C.GraphicOut(C.DRAW_OPT_NORMAL) 
// }

// @[as_macro] 
// pub fn graphic_array() i8 {
// 	return C.GraphicArrayOut(C.DRAW_OPT_NORMAL) 
// }

// @[as_macro] 
// pub fn graphic_ex() i8 {
// 	return C.GraphicOutEx(C.DRAW_OPT_NORMAL) 
// }

// @[as_macro] 
// pub fn graphic_array_ex() i8 {
// 	return C.GraphicArrayOutEx(C.DRAW_OPT_NORMAL) 
// }

// @[as_macro] 
// pub fn get_normal() {
// 	return C.GetDisplayNormal() 
// }

// @[as_macro] 
// pub fn set_normal() {
// 	return C.SetDisplayNormal() 
// }

// @[as_macro] 
// pub fn get_popup() {
// 	return C.GetDisplayPopup() 
// }

// @[as_macro] 
// pub fn set_popup() {
// 	return C.SetDisplayPopup() 
// }

// @[as_macro] 
// pub fn erase_mask() {
// 	return C.DisplayEraseMask() 
// }

// @[as_macro] 
// pub fn update_mask() {
// 	return C.DisplayUpdateMask() 
// }

// @[as_macro] 
// pub fn font() {
// 	return C.DisplayFont() 
// }

// @[as_macro] 
// pub fn display() {
// 	return C.DisplayDisplay() 
// }

// @[as_macro] 
// pub fn flags() {
// 	return C.DisplayFlags() 
// }

// @[as_macro] 
// pub fn text_lines_center_flags() {
// 	return C.DisplayTextLinesCenterFlags() 
// }

// @[as_macro] 
// pub fn sys_draw_text() {
// 	return C.SysDrawText() 
// }

// @[as_macro] 
// pub fn sys_draw_point() {
// 	return C.SysDrawPoint() 
// }

// @[as_macro] 
// pub fn sys_draw_line() {
// 	return C.SysDrawLine() 
// }

// @[as_macro] 
// pub fn sys_draw_circle() {
// 	return C.SysDrawCircle() 
// }

// @[as_macro] 
// pub fn sys_draw_rect() {
// 	return C.SysDrawRect() 
// }

// @[as_macro] 
// pub fn sys_draw_graphic() {
// 	return C.SysDrawGraphic() 
// }

// @[as_macro] 
// pub fn sys_set_mode() {
// 	return C.SysSetScreenMode() 
// }

// @[as_macro] 
// pub fn sys_display_execute_function() {
// 	return C.SysDisplayExecuteFunction() 
// }

@[as_macro] 
pub fn read_contrast() u8 {
	return C.DisplayContrast() 
}

// @[as_macro] 
// pub fn sys_draw_graphic_array() {
// 	return C.SysDrawGraphicArray() 
// }

// @[as_macro] 
// pub fn sys_draw_polygon() {
// 	return C.SysDrawPolygon() 
// }

// @[as_macro] 
// pub fn sys_draw_ellipse() {
// 	return C.SysDrawEllipse() 
// }

// @[as_macro] 
// pub fn sys_draw_font() {
// 	return C.SysDrawFont() 
// }

@[as_macro] 
pub fn clear() {
	
	C.ClearScreen()
	cursor_x = 0
	cursor_y = 56

}

@[as_macro] 
pub fn clear_line() {
	return C.ClearLine() 
}

@[as_macro] 
pub fn set_font() {
	return C.SetDisplayFont() 
}

// @[as_macro] 
// pub fn set_display() {
// 	return C.SetDisplayDisplay() 
// }

// @[as_macro] 
// pub fn set_erase_mask() {
// 	return C.SetDisplayEraseMask() 
// }

// @[as_macro] 
// pub fn set_flags() {
// 	return C.SetDisplayFlags() 
// }

// @[as_macro] 
// pub fn set_text_lines_center_flags() {
// 	return C.SetDisplayTextLinesCenterFlags() 
// }

// @[as_macro] 
// pub fn set_update_mask() {
// 	return C.SetDisplayUpdateMask() 
// }

@[as_macro] 
pub fn set_contrast(contrast u8) {
	return C.SetDisplayContrast(contrast) 
}


// cursor variables
__global (
	cursor_x = i8(0)
	cursor_y = i8(56)	
)

const x_max = i8(90)
const y_max = i8(56)

// @[inline]
pub fn into_range(num i8, max i8, min i8) i8 {
	if num > max {
		return max
	}
	else if num < min {
		return min
	}
	else {
		return num
	}
}


// @[inline]
pub fn move_to(x i8, y i8) {
	cursor_x = lcd.into_range(x*6, x_max, 0)
	cursor_y = lcd.into_range(56-(y*8), y_max, 0)
}


// @[inline]
pub fn print(msg string) {
	lcd.text(cursor_x, cursor_y, msg)
	cursor_x += str.len(msg)*6
	cursor_x = lcd.into_range(cursor_x, x_max, 0)
}


// @[inline]
pub fn println(msg string) {
	lcd.print(msg)
	cursor_y -= 8
	cursor_y = lcd.into_range(cursor_y, y_max, 0)
	cursor_x = 0
}
